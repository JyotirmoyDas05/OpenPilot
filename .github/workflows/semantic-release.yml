name: semantic-release

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - uses: actions/setup-go@v5
        with:
          go-version: "1.25.x"
          check-latest: true
      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          version: latest
          install-only: true
      - name: Install dependencies (ci with fallback)
        run: |
          if [ -f package-lock.json ]; then
            echo "Attempting npm ci (lockfile present)";
            if ! npm ci; then
              echo "npm ci failed; falling back to npm install";
              npm install;
            fi
          else
            echo "No lockfile found; running npm install";
            npm install;
          fi
      - name: Install semantic-release exec plugin
        run: npm install --save-dev @semantic-release/exec
      - name: Commit any lockfile changes before release
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add package-lock.json package.json npm/package-lock.json npm/package.json || true
          git commit -m "chore: update lockfiles before release [skip ci]" || echo "No lockfile changes to commit"
      - name: Clean build artifacts only
        run: |
          # Remove only build artifacts, not dependency files
          rm -rf dist/ npm/dist/ || true
      - name: Delete existing release assets to prevent conflicts
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            try {
              // Get all releases to find any existing ones
              const releases = await github.rest.repos.listReleases({ owner, repo, per_page: 10 });
              for (const release of releases.data) {
                if (release.tag_name.startsWith('v1.') || release.tag_name.includes('untagged')) {
                  console.log(`Cleaning assets from release: ${release.tag_name}`);
                  for (const asset of release.assets) {
                    console.log(`Deleting asset: ${asset.name}`);
                    await github.rest.repos.deleteReleaseAsset({ 
                      owner, 
                      repo, 
                      asset_id: asset.id 
                    });
                  }
                }
              }
            } catch (e) {
              console.log('No releases or assets to delete:', e.message);
            }
      - name: Semantic Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm run semantic-release
